@using DoAN_k4.Helpers
@using Microsoft.AspNetCore.Http
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@{
    ViewData["Title"] = "Detail Page";
    Layout = "~/Areas/SocialUser/Views/Shared/_LayoutUser.cshtml";
    var userId = @HttpContextAccessor.HttpContext.Session.GetString("UserLogin");
}

<div class="col-xl-7 col-xxl-8 col-lg-7">
    <div class="card w-100 shadow-xss rounded-xxl border-0 p-4 mb-3" id="@Model.Id">
        <div class="card-body p-0 d-flex">
            <figure class="avatar me-3">
                @if (!string.IsNullOrEmpty(Model.UserImg))
                {
                    var userIG = Model.UserImg.Replace("http://10.0.2.2:3000", "http://localhost:3000");
                    <img src="@userIG" alt="image" class="shadow-sm rounded-circle w45">
                }
                else
                {
                    <img src="https://cdn.pixabay.com/photo/2018/11/13/21/43/avatar-3814049_960_720.png" alt="image" class="shadow-sm rounded-circle w45">
                }

            </figure>
            <h4 class="fw-700 text-grey-900 font-xssss mt-1">
                @Model.UserName
                <span class="d-block font-xssss fw-500 mt-1 lh-3 text-grey-500">
                    @DateHelper.FormatTimeDifference(Model.PostTime)
                    @*@Model.PostTime.ToString("dd-MM-yyyy HH:mm")*@
                </span>
            </h4>
            @if (Model.UserId == userId)
            {
                <a href="#" class="ms-auto" id="dropdownMenu2" data-bs-toggle="dropdown" aria-expanded="false"><i class="ti-more-alt text-grey-900 btn-round-md bg-greylight font-xss"></i></a>
                <div class="dropdown-menu dropdown-menu-end p-4 rounded-xxl border-0 shadow-lg" aria-labelledby="dropdownMenu2">
                    <div class="card-body p-0 d-flex mt-2">
                        <i class="feather-alert-circle text-grey-500 me-3 font-lg"></i>
                        <a href="#">
                            <h4 class="fw-600 text-grey-900 font-xssss mt-0 me-4" onclick="deletePost('@Model.Id')">
                                Delete Post
                            </h4>
                        </a>
                    </div>
                </div>
            }

        </div>
        <div>
            <div class="card-body p-0 me-lg-5">
                <a asp-area="SocialUser" asp-controller="Home" asp-action="GetPostDetail" asp-route-postId="@Model.Id">
                    <p class="fw-500 text-grey-500 lh-26 font-xssss w-100">
                        @Model.Post
                    </p>
                </a>
            </div>
            <div class="card-body d-block p-0">
                @if (Model.PostImg != null)
                {
                    @foreach (var imageUrl in Model.PostImg)
                    {
                        @if (!string.IsNullOrEmpty(imageUrl))
                        {
                            var replacedImageUrl = imageUrl.Replace("http://10.0.2.2:3000", "http://localhost:3000");
                            var isImage = replacedImageUrl.EndsWith(".jpg") || replacedImageUrl.EndsWith(".jpeg") || replacedImageUrl.EndsWith(".png");
                            var isVideo = replacedImageUrl.EndsWith(".mp4") || replacedImageUrl.EndsWith(".mov") || replacedImageUrl.EndsWith(".avi");

                            <div class="row ps-2 pe-2">
                                <div class="col-xs-12 col-sm-12 p-1">
                                    <a href="@replacedImageUrl" data-lightbox="">
                                        @if (isImage)
                                        {
                                            <img src="@replacedImageUrl" class="rounded-3 w-100" alt="image">
                                        }
                                        else if (isVideo)
                                        {
                                            <video controls class="rounded-3 w-100">
                                                <source src="@replacedImageUrl" type="video/mp4">
                                                Your browser does not support the video tag.
                                            </video>
                                        }
                                    </a>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="row ps-2 pe-2">
                                <div class="col-xs-12 col-sm-12 p-1">
                                    <a href="" data-lightbox="">
                                        <img src="https://bim.gov.vn/Upload/images/staffs/avatar-default.jpg" class="rounded-3 w-100" alt="image">
                                    </a>
                                </div>
                            </div>
                        }
                    }
                }

            </div>
        </div>

        <div class="card-body d-flex p-0 mt-3 justify-content-between">
            @if (Model.Likes != null)
            {
                int likeCount = Model.Likes.Length;

                @if (Model.Liked)
                {
                    <a href="#" onclick="react(event, '@Model.Id')" class="emoji-bttn d-flex align-items-center fw-600 text-grey-900 text-dark lh-26 font-xssss me-2">
                        <i class="feather-heart text-white bg-red-gradiant me-2 btn-round-xs font-xss" data-item-id="@Model.Id"></i>
                        <span class="likeCount" data-item-id="@Model.Id">@likeCount Like</span>
                    </a>
                }
                else
                {
                    <a  href="#" onclick="react(event, '@Model.Id')" class="emoji-bttn d-flex align-items-center fw-600 text-grey-900 text-dark lh-26 font-xssss me-2">
                        <i class="feather-heart me-2 btn-round-xs font-xss" data-item-id="@Model.Id"></i>
                        <span class="likeCount" data-item-id="@Model.Id">@likeCount Like</span>
                    </a>
                }

            }
            else
            {
                <a  href="#" onclick="react(event, '@Model.Id')" class="emoji-bttn d-flex align-items-center fw-600 text-grey-900 text-dark lh-26 font-xssss me-2">
                    <i class="feather-heart me-2 btn-round-xs font-xss" data-item-id="@Model.Id"></i>
                    <span>0 Like</span>
                </a>
            }
            @if (Model.Comments != null)
            {
                int cmtCount = Model.Comments.Length;
                <a href="#" class="d-flex align-items-center fw-600 text-grey-900 text-dark lh-26 font-xssss">
                    <i class="feather-message-circle text-dark text-grey-900 btn-round-sm font-lg"></i>
                    <span id="commentCountSpan">@cmtCount Comments</span>
                </a>
            }
            else
            {
                <a href="#" class="d-flex align-items-center fw-600 text-grey-900 text-dark lh-26 font-xssss">
                    <i class="feather-message-circle text-dark text-grey-900 btn-round-sm font-lg"></i>
                    <span id="commentCountSpan">0 Comment</span>
                </a>
            }
        </div>
    </div>
</div>
<div class="col-xl-5 col-xxl-4 col-lg-5 pe-0 ps-0">
    <div class="card w-100 d-block chat-body p-0 border-0 shadow-xss rounded-3 mb-3 position-relative">
        <div class="messages-content chat-wrapper scroll-bar p-3">
            @if (Model.Comments != null)
            {
                @foreach (var item in Model.Comments)
                {

                    <div class="message-item">
                        <div class="message-user">
                            <figure class="avatar">
                                @if (!string.IsNullOrEmpty(item.UserAvatar))
                                {
                                    var replacedImageUrl = item.UserAvatar.Replace("http://10.0.2.2:3000", "http://localhost:3000");
                                    <img src="@replacedImageUrl" alt="image">

                                }
                            </figure>
                            <div>
                                <h5 class="font-xssss mt-2">@item.UserName</h5>
                                <div class="time">
                                    @DateHelper.FormatTimeDifference(item.CmtDate.ToString())
                                </div>
                            </div>
                        </div>
                        <div class="message-wrap shadow-none">@item.Content</div>
                    </div>
                }
            }
        </div>
        <form class="chat-form position-absolute bottom-0 w-100 left-0 bg-white z-index-1 p-3 shadow-xs theme-dark-bg " id="commentForm" data-item-id="@Model.Id">
            <div class="form-group">
                <input id="commentInput" type="text" placeholder="Start typing.." name="content" style="opacity: 1; color: black; border: 1px solid #ccc; background: #ddd;">
            </div>
            <button class="bg-current"><i class="ti-arrow-right text-white"></i></button>
        </form>
    </div>
</div>
@section Scripts {
    <script>
        $(document).ready(function () {
            

        });
        function react(event, itemId) {
            event.preventDefault();
            var btn = $(event.currentTarget);
            var likeCountElem = $(".likeCount[data-item-id='" + itemId + "']");
            console.log("item :" + itemId);
            // Gửi yêu cầu Ajax
            $.ajax({
                type: "post", // Hoặc POST tùy thuộc vào cách bạn cấu hình server
                url: "/SocialUser/home/UpdatePostLikes", // Thay đổi ControllerName thành tên controller của bạn
                data: { postId: itemId },
                dataType: "json",
                success: function (response) {
                    console.log(response.liked);
                    if (response.liked == true) {
                        console.log("tcvf");
                        $(".feather-heart[data-item-id='" + itemId + "']").addClass("bg-red-gradiant");
                        $(".feather-heart[data-item-id='" + itemId + "']").addClass("text-white");

                    } else if (response.liked == false) {
                        // Nếu liked là false, cập nhật trạng thái liked
                        console.log("shjs");
                        $(".feather-heart[data-item-id='" + itemId + "']").removeClass("bg-red-gradiant");
                        $(".feather-heart[data-item-id='" + itemId + "']").removeClass("text-white");
                    } else {
                        alert("Có lỗi xảy ra. Vui lòng thử lại sau.");
                    }

                    // Cập nhật số lượng like (nếu có) - Lưu ý: Nếu API không trả về số lượng like, bạn phải cập nhật số lượng like một cách riêng biệt (nếu cần thiết)
                    var currentLikeCount = parseInt(likeCountElem.text());
                    var newLikeCount = response.liked ? currentLikeCount + 1 : currentLikeCount - 1;
                    likeCountElem.text(newLikeCount + " Like");
                },
                error: function () {
                    alert("Có lỗi xảy ra. Vui lòng thử lại sau.");
                }
            });
        };
        function replaceImageUrl(imageUrl) {
            return imageUrl.replace("http://10.0.2.2:3000", "http://localhost:3000");
        }
        function formatTimeDifference(dateTimeString) {
            const postTime = new Date(dateTimeString);
            const now = new Date();
            const timeDifference = now - postTime;

            const minutesDifference = Math.floor(timeDifference / (1000 * 60));
            if (minutesDifference < 1) {
                return "Just now";
            } else if (minutesDifference === 1) {
                return "1 minute ago";
            } else if (minutesDifference < 60) {
                return `${minutesDifference} minutes ago`;
            } else if (minutesDifference < 1440) {
                const hoursDifference = Math.floor(minutesDifference / 60);
                return `${hoursDifference} ${hoursDifference === 1 ? "hour" : "hours"} ago`;
            } else {
                const daysDifference = Math.floor(minutesDifference / 1440);
                return `${daysDifference} ${daysDifference === 1 ? "day" : "days"} ago`;
            }
        }
        $(document).ready(function () {
            $("#commentForm").submit(function (e) {
                e.preventDefault(); // Prevent the form from submitting normally

                // Get the comment text from the input field
                var comment = $("#commentInput").val();
                var postId = $("#commentForm").data("item-id");

                // Send the AJAX request to post the comment
                $.ajax({
                    type: "POST",
                    url: "/SocialUser/home/PostComment",
                    data: {
                        postId: postId,
                        content: comment,
                    },
                    success: function (response) {
                        console.log(response);
                        var responseData = JSON.parse(response);
                        console.log(responseData.comment);
                        console.log(responseData.comment.userAvatar);
                        var commentHtml =
                            '<div class="message-item">' +
                            '<div class="message-user">' +
                            '<figure class="avatar">';
                        if (responseData.comment.userAvatar) {
                            // Replace the image URL before appending it to the HTML
                            var replacedImageUrl = replaceImageUrl(responseData.comment.userAvatar);
                            commentHtml += '<img src="' + replacedImageUrl + '" alt="image">';
                        }
                        commentHtml +=
                            '</figure>' +
                            '<div>' +
                            '<h5 class="font-xssss mt-2">' + responseData.comment.userName + '</h5>' +
                            '<div class="time">' + formatTimeDifference(responseData.comment.cmtDate) + '</div>' +
                            '</div>' +
                            '</div>' +
                            '<div class="message-wrap shadow-none">' + responseData.comment.content + '</div>' +
                            '</div>';

                        $(".messages-content").prepend(commentHtml);

                        var currentCommentCount = parseInt($("#commentCountSpan").text());
                        var newCommentCount = currentCommentCount + 1;

                        // Update the displayed count
                        $("#commentCountSpan").text(newCommentCount + " Comments");

                        $("#commentInput").val("");
                    },
                    error: function () {
                        // Handle error here if needed
                    }
                });
            });
        });

        function deletePost(postId) {
            if (!confirm("Are you sure you want to delete this post?")) {
                return;
            }
            console.log(postId);
            $.ajax({
                type: "POST",
                url: `/SocialUser/Home/DeletePost`,
                data: { postId },
                success: function (response) {
                    console.log(response);
                    // Xoá bài viết khỏi giao diện
                    $(`#${postId}`).remove();
                },
                error: function () {
                    // Xử lý khi có lỗi trong quá trình xoá bài viết
                }
            });
        }
    </script>
}